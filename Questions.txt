Q) Which are legal:
A) { int x; }
   { int x; }
B) class X {
     { sout(x); } // sout means System.out.println ...
     int x;
   }
C) {
     int x;
     { int x; }
   }
D) {
     int x;
     Predicate<String> ps = x -> true;
   }
E) for (int x = 0; x < 10; x++)
     ;
    int x;

Q) Which are legal:
   A) class X {
     var x = 99;
   }

   B) void doStuff(var x) { }

   C) void doStuff() {
     var x;
     x = 100;
   }
   D) void doStuff() {
     var x = 100;
   }

   E) void doStuff() {
     var x = { 1, 2, 3 };
   }

Q) Which are legal:
   A) void doStuff() {
     var x = new int[]{ 1, 2, 3 };
   }
   B) void doStuff() {
     var [] x = new int[]{ 1, 2, 3 };
   }
   C) void doStuff() {
     var x = 99;
     x = "Hello";
   }
   D) void doStuff() {
     var x = 1, y = 2;
   }
   E)
   void doStuff() {
     try {
      // stuff happens
      } catch (var ex) {
      }
   }

Q) Which are legal
   A)
      for (var x = 0; x < 3; x++)
        System.out.println(x);
   B)
      try (var in = new FileReader("");
           var out = new FileWriter("")) {
      }
   C)
      var var = "var";

Q)   Which print "true"
   A) String s = "Hello";
      String t = "He";
      t += "llo";
      sout(s == t);
   B) String s = "Hello";
      String t = "He";
      t += "llo";
      sout(s.equals(t));
   C) StringBuilder s = new StringBuilder("Hello");
      StringBuilder t = new StringBuilder("He");
      t.append("llo");
      sout(s.equals(t));
   D) List<String> ls = List.of("Fred", "Jim");
      List<String> ls2 = new ArrayList<>(ls);
      sout(ls.equals(ls2));
   E) LocalDate ld = LocalDate.of(2021, 3, 29);
      LocalDate ld2 = LocalDate.of(2021, 3, 29);
      sout(ld.equals(ld2));

Q)
Given:
class X {
  static String h = "Hello";
}
and:
     String s1 = "Hello";
     String s2 = new StringBuilder("Hello").toString();
     String s3 = s2.intern();

Which are true?
A) s1 == s2
B) s2 == s3
C) s1 == s3
D) X.h == s1

Q) Which are valid?
     A) int x = 99; while (x) {}
     B) int x = 99; switch (x) {}
     C) enum Day { MONDAY; }
   ...
     Day x = Day.MONDAY;
   switch (x) {
       case MONDAY:
     }
     D) enum Day { MONDAY; }
   ...
     Day x = Day.MONDAY;
   switch (x) {
       case Day.MONDAY:
     }
     E) long count = 99;
   switch (count) {}

Q) Given
     void doStuff() throws IOException {};
     void doStuff2() throws FileNotFoundException {};
   And:
     void tryStuff() {
       try {
         doStuff();
         doStuff2();
       } enter code here { // handle both exceptions
       }
     }
   What can be inserted at "enter code here"
   to provide handling of exceptions from both
   methods?
A) catch (IOException | FileNotFoundException e)
B) catch (FileNotFoundException | IOException e)
C) catch (FileNotFoundException e)
D) catch (IOException e)
E) finally

Q) Given class AC implements AutoCloseable {
     private String name; // constructor initializes name
     public void close() { System.out.println("Closing " + name); } }
And:
       var ac0 = new AC("zero");
       try ( var ac1 = new AC("one");
           var ac2 = new AC("two");
           ac0;){
       }
     }
What is the result?
   A) Compilation fails
   B) Closing zero Closing two Closing one
   C) Closing zero Closing one Closing two
   D) Closing two Closing one Closing zero
   E) Closing one Closing two Closing zero

Q) Given
     void doStuff(int x, int y) {}         // Method A
     void doStuff(int x, long y) {}        // Method B
     void doStuff(long x, int y) {}        // Method C
     void doStuff(int ... x) {}            // Method D
     void doStuff(Integer x, Integer y) {} // Method E

which method will be invoked by this call:
       doStuff(1, 2);

Q) Given
     void doStuff(int x, int y) {}         // Method A
     void doStuff(int x, long y) {}        // Method B
     void doStuff(long x, int y) {}        // Method C
     void doStuff(int ... x) {}            // Method D
     void doStuff(Integer x, Integer y) {} // Method E

if method A is removed, what is the result of this call:
       doStuff(1, 2);

A) Compilation fails
B) method B is invoked
C) method C is invoked
D) method D is invoked
E) method E is invoked

Q) Given
     void doStuff(int x, int y) {}         // Method A
     void doStuff(int x, long y) {}        // Method B
     void doStuff(long x, int y) {}        // Method C
     void doStuff(int ... x) {}            // Method D
     void doStuff(Integer x, Integer y) {} // Method E

if methods A, B, and C are removed, what is the result of this call:
       doStuff(1, 2);

A) Compilation fails
D) method D is invoked
E) method E is invoked

Q) Given:
  public static void funct(int x) {
    x = x + 1;
  }
and:
  public static void main(String[] args) {
    int x = 99;
    funct(x);
    System.out.println(x);
  }

What is the result?
  A) 99
  B) 100
  C) An error

Q) Given:
  public static void q12A(StringBuilder x) {
    x.append(" world");
  }

and:
  public static void main(String[] args) {
    StringBuilder x = new StringBuilder("Hello");
    q12A(x);
    System.out.println(x);
  }

  What is the result?
  A) Hello
  B) Hello world
  C)  world
  D) An error

Q) Given:
    public static void q14A(Integer x) {
      x = x + 1;
    }
and:
    public static void main(String[] args) {
      Integer x = 99;
      q14A(x);
      System.out.println(x);
    }

    What is the result?
    A) 99
    B) 100
    C) An error

Q) Given:
     class Q25Base {
       int x = 99;
       { System.out.println("x is " + x); }
     }
     class Q25Sub extends Q25Base {
       Q25Sub(int x) { System.out.println("in constructor, x is " + x); }
       public static void go() { new Q25Sub(1); }
     }

   Given a call to go(), what is the result?
   A) in constructor, x is 1
      x is 99
   B) x is 99
      in constructor, x is 1
   C) x is 99
      in constructor, x is 99
   D) Compilation fails

Q) class Parent {
Parent(int x) { y += x; }
 static { System.out.println("x is " + Parent.x); }
 static int x = 99;
 int y = 100;
 { y++; System.out.println("y is " + y); }
}
class Child extends Parent {
 int x = 200;
 static int y = 300;
 Child() { super(x); }
 Child(int x) { this(); }
 { System.out.println("x is " + x); }
 static { System.out.println("y is " + y); }
}
and:
       System.out.println("Hello!");
       new Child(-1);
What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello!
x is 0
y is 300
y is 101
x is 200
D)x is 0
y is 300
y is 101
x is 200
Hello!
E) Hello!
x is 99
y is 300
y is 101
x is 200

Q) Given:
interface Int1 {
 default void doStuff() {
   System.out.println("Int1.doStuff()");
 }
}
class Cl1 implements Int1 {
 void doStuff() {
   System.out.println("Cl1.doStuff");
 }
}
What is the result of a call:
new Cl1().doStuff();
A) Compilation fails
B) RuntimeException
C) Int1.doStuff()
D) Cl1.doStuff()
E) Int1.doStuff()
   Cl1.doStuff()

Q) Given:
   interface Int1 {
     default void doStuff() {  System.out.println("Int1.doStuff()"); }
   }
   class Cl2 implements Int1 {
     public void doStuff() { System.out.println("Cl2.doStuff"); }
   }
What is the result of a call:
   public class Q2 {
     public static void main(String[] args) {
       new Cl2().doStuff();
     }
   }

A) Compilation fails
B) RuntimeException
C) Int1.doStuff()
D) Cl2.doStuff()
E) Int1.doStuff()
   Cl2.doStuff()

Q) Given:
interface IntX {
 default void doStuff() { System.out.println("IntX.doStuff()"); }
}
interface IntY {
 default void doStuff() { System.out.println("IntY.doStuff()"); }
}
class ClQ implements IntX, IntY {
}
What is the result of a call:
   new ClQ().doStuff();
A) Compilation fails
B) RuntimeException
C) IntX.doStuff()
D) IntY.doStuff()
E) C1QdoStuff()

Q) Given:
enum Day {
    MONDAY(1), TUESDAY;
    public Day(int d) {}
    public Day() {}
}
and:
sout(Day.MONDAY);

What is the result?
A) 1
B) MONDAY
C) Day.MONDAY
D) Exception at runtime
E) Compilation fails

Q) Given:
class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
}
class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
}

In the Base and Sub classes, which are true in isolation?
A) doBaseStuff in Base can be marked throws Exception without causing errors
B) doBaseStuff in Base can be marked throws RuntimeException without causing errors
C) doBaseStuff in Sub can be marked throws Exception without causing errors
D) doBaseStuff in Sub can be marked throws RuntimeException without causing errors
E) if doBaseStuff in Base were marked throws Exception,
   then doBaseStuff in Sub can be marked throws IOException without causing errors

Q) Given:
class Base {
   void doBaseStuff() {
     System.out.println("doBaseStuff");
   }
 }
 class Sub extends Base {
   void doBaseStuff() { System.out.println("doSubStuff"); }
   void doOtherStuff() { System.out.println("doOtherStuff"); }
 }
 In the Base and Sub classes, which are true in isolation?
 A) doBaseStuff in Base can be marked public without causing errors
 B) doBaseStuff in Base can be marked private without causing errors
 C) doBaseStuff in Sub can be marked public without causing errors
 D) doBaseStuff in Sub can be marked protected without causing errors
 E) doBaseStuff in Sub can be marked private without causing errors

Q) Given
 class Base2 {
   void doBaseStuff() {
     System.out.println("doBaseStuff");
   }
 }
 class Sub2 extends Base2 {
   void doBaseStuff(int x) {
     System.out.println("doSubStuff");
   }
 }
In the Base and Sub classes, which are true in isolation?
A) doBaseStuff in Base can be marked throws Exception without causing errors
B) doBaseStuff in Base can be marked throws RuntimeException without causing errors
C) doBaseStuff in Sub can be marked throws Exception without causing errors
D) doBaseStuff in Sub can be marked throws RuntimeException without causing errors
E) if doBaseStuff in Base were marked throws Exception,
  then doBaseStuff in Sub can be marked throws IOException without causing errors

Q) Given:
     public int getValue() {
       return 1;
     }

 Which of these methods may individually be added to a subclass of this class?
 A) public int getValue(int x) {return 1;}
 B) public String getValue() {return "Hello";}
 C) public String getValue(int x) {return "Hello";}

Q) Given:
 class Q24Base {
   public int get() {
     return 0;
   }
 }

 class Q24Sub extends Q24Base {}

 Which methods may individually be added to this class?
 A) public long get() { return 1; }
 B) public short get() { return 1; }
 C) public Q24Base get() { return null; }
 D) None of these

Q) Given:
 class Q23Base {
   public Q23Base get() {
     return null;
   }
 }

 class Q23Sub extends Q23Base {
 }

Which methods may individually be added to this class?

A) public Q23Base get() { return null; }
B) public Q23Sub get() { return null; }
C) public Runnable get() { return null; }

Q) Given:
interface StudentCriterion {
   boolean test(Student s);
}
and:
class Student {
   public int getGpa() { return 0; }
   public List<String> getCourses() { return null; }
}

Which are legal (individually):
A) StudentCriterion sc = Student s -> { return s.getGpa() > 3;};
B) StudentCriterion sc = s -> { s.getGpa() > 3 };
C) Object sc = s -> {return s.getGpa() > 3;};
D) StudentCriterion sc = (s) -> s.getGpa() > 3;
E) StudentCriterion sc = s -> s.getCourses().size();
